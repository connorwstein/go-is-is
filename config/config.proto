// From go-is-is, run protoc -I config/ --go_out=plugins=grpc:config/ config/config.proto
// This will define the gRPC service to send in config to the IS-IS node
// Note that the gRPC plugin for the protoc compiler is what actually generates
// the client/server code
syntax = "proto3";
package config;

service Configure {
    rpc ConfigureSystemID (SystemIDCfgRequest) returns (SystemIDCfgReply) {}
}

service State {
    // Could also support streaming updates out this system ?
    rpc GetIntf (IntfRequest) returns (IntfReply) {}
    rpc GetLsp (LspRequest) returns (LspReply) {}
    rpc GetSystemID (SystemIDRequest) returns (SystemIDReply) {}
}

message IntfRequest {
    // Optionally specify the interface to be selected 
    // Empty string signifies a request for all interfaces 
    string shIntf = 1; 
}

message IntfReply {
    repeated string intf = 1;
}

message LspRequest {
    string shLsp = 1; 
}

message LspReply {
    // Similar to interface requests, can specify a specific lsp
    // or an empty string will return all of them
    repeated string lsp = 1;
}

message SystemIDRequest {
    string shSystemID = 1;
}
message SystemIDReply {
    string sid = 1; 
}

// The request message containing the system id to use
message SystemIDCfgRequest {
    string sid = 1;
}

// The response message containing the greetings
message SystemIDCfgReply {
    string ack = 1;
}
