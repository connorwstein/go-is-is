// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	IntfRequest
	IntfReply
	LspRequest
	LspReply
	SystemIDRequest
	SystemIDReply
	SystemIDCfgRequest
	SystemIDCfgReply
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntfRequest struct {
	// Optionally specify the interface to be selected
	// Empty string signifies a request for all interfaces
	ShIntf string `protobuf:"bytes,1,opt,name=shIntf" json:"shIntf,omitempty"`
}

func (m *IntfRequest) Reset()                    { *m = IntfRequest{} }
func (m *IntfRequest) String() string            { return proto.CompactTextString(m) }
func (*IntfRequest) ProtoMessage()               {}
func (*IntfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IntfRequest) GetShIntf() string {
	if m != nil {
		return m.ShIntf
	}
	return ""
}

type IntfReply struct {
	Intf []string `protobuf:"bytes,1,rep,name=intf" json:"intf,omitempty"`
}

func (m *IntfReply) Reset()                    { *m = IntfReply{} }
func (m *IntfReply) String() string            { return proto.CompactTextString(m) }
func (*IntfReply) ProtoMessage()               {}
func (*IntfReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IntfReply) GetIntf() []string {
	if m != nil {
		return m.Intf
	}
	return nil
}

type LspRequest struct {
	ShLsp string `protobuf:"bytes,1,opt,name=shLsp" json:"shLsp,omitempty"`
}

func (m *LspRequest) Reset()                    { *m = LspRequest{} }
func (m *LspRequest) String() string            { return proto.CompactTextString(m) }
func (*LspRequest) ProtoMessage()               {}
func (*LspRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LspRequest) GetShLsp() string {
	if m != nil {
		return m.ShLsp
	}
	return ""
}

type LspReply struct {
	// Similar to interface requests, can specify a specific lsp
	// or an empty string will return all of them
	Lsp []string `protobuf:"bytes,1,rep,name=lsp" json:"lsp,omitempty"`
}

func (m *LspReply) Reset()                    { *m = LspReply{} }
func (m *LspReply) String() string            { return proto.CompactTextString(m) }
func (*LspReply) ProtoMessage()               {}
func (*LspReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LspReply) GetLsp() []string {
	if m != nil {
		return m.Lsp
	}
	return nil
}

type SystemIDRequest struct {
	ShSystemID string `protobuf:"bytes,1,opt,name=shSystemID" json:"shSystemID,omitempty"`
}

func (m *SystemIDRequest) Reset()                    { *m = SystemIDRequest{} }
func (m *SystemIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SystemIDRequest) ProtoMessage()               {}
func (*SystemIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SystemIDRequest) GetShSystemID() string {
	if m != nil {
		return m.ShSystemID
	}
	return ""
}

type SystemIDReply struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *SystemIDReply) Reset()                    { *m = SystemIDReply{} }
func (m *SystemIDReply) String() string            { return proto.CompactTextString(m) }
func (*SystemIDReply) ProtoMessage()               {}
func (*SystemIDReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SystemIDReply) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// The request message containing the system id to use
type SystemIDCfgRequest struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *SystemIDCfgRequest) Reset()                    { *m = SystemIDCfgRequest{} }
func (m *SystemIDCfgRequest) String() string            { return proto.CompactTextString(m) }
func (*SystemIDCfgRequest) ProtoMessage()               {}
func (*SystemIDCfgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SystemIDCfgRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// The response message containing the greetings
type SystemIDCfgReply struct {
	Ack string `protobuf:"bytes,1,opt,name=ack" json:"ack,omitempty"`
}

func (m *SystemIDCfgReply) Reset()                    { *m = SystemIDCfgReply{} }
func (m *SystemIDCfgReply) String() string            { return proto.CompactTextString(m) }
func (*SystemIDCfgReply) ProtoMessage()               {}
func (*SystemIDCfgReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SystemIDCfgReply) GetAck() string {
	if m != nil {
		return m.Ack
	}
	return ""
}

func init() {
	proto.RegisterType((*IntfRequest)(nil), "config.IntfRequest")
	proto.RegisterType((*IntfReply)(nil), "config.IntfReply")
	proto.RegisterType((*LspRequest)(nil), "config.LspRequest")
	proto.RegisterType((*LspReply)(nil), "config.LspReply")
	proto.RegisterType((*SystemIDRequest)(nil), "config.SystemIDRequest")
	proto.RegisterType((*SystemIDReply)(nil), "config.SystemIDReply")
	proto.RegisterType((*SystemIDCfgRequest)(nil), "config.SystemIDCfgRequest")
	proto.RegisterType((*SystemIDCfgReply)(nil), "config.SystemIDCfgReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Configure service

type ConfigureClient interface {
	ConfigureSystemID(ctx context.Context, in *SystemIDCfgRequest, opts ...grpc.CallOption) (*SystemIDCfgReply, error)
}

type configureClient struct {
	cc *grpc.ClientConn
}

func NewConfigureClient(cc *grpc.ClientConn) ConfigureClient {
	return &configureClient{cc}
}

func (c *configureClient) ConfigureSystemID(ctx context.Context, in *SystemIDCfgRequest, opts ...grpc.CallOption) (*SystemIDCfgReply, error) {
	out := new(SystemIDCfgReply)
	err := grpc.Invoke(ctx, "/config.Configure/ConfigureSystemID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configure service

type ConfigureServer interface {
	ConfigureSystemID(context.Context, *SystemIDCfgRequest) (*SystemIDCfgReply, error)
}

func RegisterConfigureServer(s *grpc.Server, srv ConfigureServer) {
	s.RegisterService(&_Configure_serviceDesc, srv)
}

func _Configure_ConfigureSystemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemIDCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).ConfigureSystemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.Configure/ConfigureSystemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).ConfigureSystemID(ctx, req.(*SystemIDCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.Configure",
	HandlerType: (*ConfigureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureSystemID",
			Handler:    _Configure_ConfigureSystemID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

// Client API for State service

type StateClient interface {
	// Could also support streaming updates out this system ?
	GetIntf(ctx context.Context, in *IntfRequest, opts ...grpc.CallOption) (*IntfReply, error)
	GetLsp(ctx context.Context, in *LspRequest, opts ...grpc.CallOption) (*LspReply, error)
	GetSystemID(ctx context.Context, in *SystemIDRequest, opts ...grpc.CallOption) (*SystemIDReply, error)
}

type stateClient struct {
	cc *grpc.ClientConn
}

func NewStateClient(cc *grpc.ClientConn) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) GetIntf(ctx context.Context, in *IntfRequest, opts ...grpc.CallOption) (*IntfReply, error) {
	out := new(IntfReply)
	err := grpc.Invoke(ctx, "/config.State/GetIntf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetLsp(ctx context.Context, in *LspRequest, opts ...grpc.CallOption) (*LspReply, error) {
	out := new(LspReply)
	err := grpc.Invoke(ctx, "/config.State/GetLsp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetSystemID(ctx context.Context, in *SystemIDRequest, opts ...grpc.CallOption) (*SystemIDReply, error) {
	out := new(SystemIDReply)
	err := grpc.Invoke(ctx, "/config.State/GetSystemID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for State service

type StateServer interface {
	// Could also support streaming updates out this system ?
	GetIntf(context.Context, *IntfRequest) (*IntfReply, error)
	GetLsp(context.Context, *LspRequest) (*LspReply, error)
	GetSystemID(context.Context, *SystemIDRequest) (*SystemIDReply, error)
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_GetIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.State/GetIntf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetIntf(ctx, req.(*IntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetLsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetLsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.State/GetLsp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetLsp(ctx, req.(*LspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetSystemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetSystemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.State/GetSystemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetSystemID(ctx, req.(*SystemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntf",
			Handler:    _State_GetIntf_Handler,
		},
		{
			MethodName: "GetLsp",
			Handler:    _State_GetLsp_Handler,
		},
		{
			MethodName: "GetSystemID",
			Handler:    _State_GetSystemID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x86, 0x25, 0x48, 0xb5, 0x83, 0xc6, 0x32, 0x7e, 0x91, 0xc6, 0xf8, 0xb1, 0x51, 0xc3, 0x89,
	0x28, 0xfc, 0x00, 0x0f, 0x98, 0x34, 0xc4, 0x9e, 0xca, 0xc5, 0x6b, 0xad, 0x5b, 0xda, 0x50, 0xe9,
	0xca, 0x2e, 0x87, 0xfe, 0x2a, 0xff, 0xa2, 0xd9, 0x2f, 0xa0, 0xd6, 0xdb, 0xcc, 0x3b, 0xef, 0xfb,
	0x74, 0x33, 0x53, 0x38, 0x4a, 0xca, 0x65, 0x9a, 0xcf, 0x87, 0x6c, 0x55, 0x8a, 0x12, 0x1d, 0xdd,
	0x91, 0x07, 0xe8, 0x4e, 0x97, 0x22, 0x8d, 0xe8, 0xf7, 0x9a, 0x72, 0x81, 0x17, 0xe0, 0xf0, 0x4c,
	0x0a, 0xfd, 0xd6, 0x6d, 0x6b, 0xe0, 0x46, 0xa6, 0x23, 0x37, 0xe0, 0x6a, 0x1b, 0x2b, 0x2a, 0x44,
	0xd8, 0xcf, 0xb5, 0xa5, 0x3d, 0x70, 0x23, 0x55, 0x13, 0x02, 0x10, 0x72, 0x66, 0x31, 0x67, 0xd0,
	0xe1, 0x59, 0xc8, 0x99, 0xa1, 0xe8, 0x86, 0x5c, 0xc1, 0xa1, 0xf2, 0x48, 0x86, 0x07, 0xed, 0x42,
	0xcd, 0x25, 0x42, 0x96, 0xe4, 0x19, 0x4e, 0x66, 0x15, 0x17, 0xf4, 0x6b, 0xfa, 0x6a, 0x31, 0xd7,
	0x00, 0x3c, 0xb3, 0xa2, 0x61, 0xed, 0x28, 0xe4, 0x0e, 0x8e, 0xb7, 0x11, 0x43, 0xe5, 0xf9, 0xa7,
	0x71, 0xca, 0x92, 0x3c, 0x02, 0x5a, 0xcb, 0x24, 0x9d, 0x5b, 0x70, 0xd3, 0x77, 0x0f, 0x5e, 0xcd,
	0x67, 0x68, 0x71, 0xb2, 0xb0, 0xae, 0x38, 0x59, 0x8c, 0xde, 0xc1, 0x9d, 0xa8, 0xbd, 0xad, 0x57,
	0x14, 0xdf, 0xa0, 0xb7, 0x69, 0x6c, 0x16, 0xfd, 0xa1, 0x59, 0x73, 0xf3, 0xab, 0x7e, 0xff, 0xdf,
	0x19, 0x2b, 0x2a, 0xb2, 0x37, 0xfa, 0x69, 0x41, 0x67, 0x26, 0x62, 0x41, 0x71, 0x0c, 0x07, 0x01,
	0x15, 0x72, 0xdb, 0x78, 0x6a, 0x03, 0x3b, 0x27, 0xf2, 0x7b, 0x75, 0x51, 0xc5, 0xf1, 0x09, 0x9c,
	0x80, 0x8a, 0x90, 0x33, 0x44, 0x3b, 0xde, 0x9e, 0xc3, 0xf7, 0x6a, 0x9a, 0x4e, 0xbc, 0x40, 0x37,
	0xa0, 0x62, 0xf3, 0xee, 0xcb, 0xbf, 0x6f, 0xb3, 0xd9, 0xf3, 0xe6, 0x40, 0x01, 0x3e, 0x1c, 0xf5,
	0x23, 0x8d, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x12, 0x2f, 0x14, 0x58, 0x02, 0x00, 0x00,
}
